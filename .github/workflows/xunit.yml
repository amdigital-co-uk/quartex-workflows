# Run unit tests
name: Run XUnit Tests
permissions:
  id-token: write
  contents: read

# Define Parameters
on:
  workflow_call:
    inputs:
      DOCKER_COMPOSE:   # Path to docker-compose.yml file: If populated, spins up containers required for integration tests
        type: string
      BRANCH_THRESHOLD: # Test coverage threshold (integer): workflow will fail if branch coverage does not meet or exceed this threshold
                        # If NOT populated, use historic data from previous runs as the threshold.
                        # Historic data stored in S3, so the AWS secrets must be populated in this instance
        type: number
        default: 0
      COVERAGE_S3_PATH: # S3 path of the CSV that stores historic coverage data (file can contain multiple repos/branches)
        type: string
      NEVER_FAIL_AT:
        type: number
        default: 95
      AWS_REGION:
        type: string
        default: us-east-1
      DEBUG:
        type: string
        default: FALSE
      DOTNET_VERSION:
        required: false
        type: string
        default: null
    secrets:
      PKG_TOKEN:
        required: true
      AWS_ROLE_ARN:
        required: true
      SONAR_TOKEN:
        required: true
jobs:
  xunit:
    name: Run XUnit Tests
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      # Static Code Analysis
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      
      # Spins up services via Docker-compose
      - name: Start containers
        if: ${{ inputs.DOCKER_COMPOSE != '' }}
        run: docker compose -f ${{ inputs.DOCKER_COMPOSE }} up -d
      
      # Login to GitHub packages
      - name: Login to GitHub packages
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ inputs.DOTNET_VERSION }}
          source-url: https://nuget.pkg.github.com/amdigital-co-uk/index.json
        env:
          NUGET_AUTH_TOKEN: ${{secrets.PKG_TOKEN}}
    
      # Setup SonarCloud
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      # - name: Cache SonarCloud packages
      #   uses: actions/cache@v1
      #   with:
      #     path: ~/sonar/cache
      #     key: ${{ runner.os }}-sonar
      #     restore-keys: ${{ runner.os }}-sonar
      # - name: Cache SonarCloud scanner
      #   id: cache-sonar-scanner
      #   uses: actions/cache@v1
      #   with:
      #     path: ./.sonar/scanner
      #     key: ${{ runner.os }}-sonar-scanner
      #     restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: |
          mkdir -p .sonar/scanner
          dotnet tool update dotnet-sonarscanner --tool-path .sonar/scanner

      # Run Unit Tests
      - name: Install code coverage tool
        run: dotnet tool install --global dotnet-reportgenerator-globaltool

      - name: Run Unit Tests
        run: |
          mv sonar-project.properties sonar-project.tmp
          .sonar/scanner/dotnet-sonarscanner begin /k:"amdigital-co-uk_testms-netcore2" /o:"amdigital-co-uk" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet test --collect "XPlat Code Coverage"
          reportgenerator -reports:$GITHUB_WORKSPACE/*/TestResults/*/coverage.cobertura.xml -targetdir:. -reporttypes:"SonarQube"
          .sonar/scanner/dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
          mv sonar-project.tmp sonar-project.properties

      - name: List files in case of failure
        #if: failure()
        run: |
          find . -iname coverage.cobertura.xml
          find . | grep -v .git/
