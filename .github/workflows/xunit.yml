# Run unit tests
name: Run XUnit Tests

# Define Parameters
on:
  workflow_call:
    inputs:
      BRANCH_THRESHOLD: # Test coverage threshold (integer): workflow will fail if branch coverage does not meet or exceed this threshold
        required: true
        type: number
      DOCKER_COMPOSE:   # Path to docker-compose.yml file: If populated, spins up containers required for integration tests
        type: string
      AWS_REGION:
        type: string
    secrets:
      PKG_TOKEN:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

jobs:
  xunit:
    name: Run XUnit Tests
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v2
      
      # Spins up services via Docker-compose
      - name: Start containers
        if: ${{ inputs.DOCKER_COMPOSE != '' }}
        run: docker compose -f ${{ inputs.DOCKER_COMPOSE }} up -d
      
      # Login to GitHub packages
      - name: Login to GitHub packages
        uses: actions/setup-dotnet@v1
        with:
          source-url: https://nuget.pkg.github.com/amdigital-co-uk/index.json
        env:
          NUGET_AUTH_TOKEN: ${{secrets.PKG_TOKEN}}
    
      # Run Unit Tests
      - name: Run Unit Tests
        run: dotnet test --collect:"XPlat Code Coverage"

      - name: Install code coverage tool
        run: dotnet tool install --global dotnet-reportgenerator-globaltool
        
      - name: Run report generation
        run: reportgenerator -reports:$GITHUB_WORKSPACE/*/TestResults/*/coverage.cobertura.xml -targetdir:$RUNNER_TEMP/coverlet/reports -reporttypes:"cobertura"

      - name: Configure AWS credentials (ECR_REGION_1)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.AWS_REGION }}

      - name: Check Branch Coverage
        id: coverage
        env:
          COVERAGE_S3_PATH: s3://amdigital-co-uk-code-audits/code-coverage/repos.csv
          REPO: ${{ github.repository }}
          BRANCH: ${{ github.ref_name }}
        run: |
          get_branch() {
            if [ -f "$1" ]; then
              cat "$1" | sed -e 's/\r//g' | grep -Po --color=never '<coverage.+branch-rate="\K[^"]+' | head -c 6
            else
              echo 0
            fi
          }

          [ "$BRANCH" = "main" ] || BRANCH=latest
          integ_report=$(find . -iname coverage.cobertura.xml | grep "\.IntegrationTest")
          unit_report=$(find . -iname coverage.cobertura.xml | grep "\.Test")

          total_rate=$(get_branch "$RUNNER_TEMP/coverlet/reports/Cobertura.xml")
          integ_rate=$(get_branch "$integ_report")
          unit_rate=$(get_branch "$unit_report")
          echo "Branch coverage rates for $REPO@${{ github.ref_name }} -- Total: $total_rate, IntegrationTests: $integ_rate, UnitTests: $unit_rate"

          aws s3 cp $COVERAGE_S3_PATH repos.csv
          record_exists=$(cat repos.csv | grep "^$REPO,$BRANCH," | wc -l)

          if [ "$record_exists" -gt 0 ]
          then
            record=$(cat repos.csv | grep "^$REPO,$BRANCH,")
            
            total_persist=$(echo $record | cut -d, -f3)
            integ_persist=$(echo $record | cut -d, -f4)
            unit_persist=$(echo $record | cut -d, -f5)

            if (( $(echo "$total_persist > $total_rate" | bc -l) ))
            then
              echo "ERROR: Test coverage has dropped from $total_persist to $total_rate"
              exit 1
            else
              echo "SUCCESS: Test coverage maintained from $total_persist to $total_rate"
            fi

            cat repos.csv | grep -v "^$REPO,$BRANCH," > repos.tmp
            mv repos.tmp repos.csv
          fi

          echo "$REPO,$BRANCH,$total_rate,$integ_rate,$unit_rate" >> repos.csv
          aws s3 cp repos.csv $COVERAGE_S3_PATH
          exit 0

